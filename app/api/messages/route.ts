import { PrismaClient, SenderType, Status } from "@prisma/client";
import { NextRequest, NextResponse } from "next/server";

const prisma = new PrismaClient();

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const startDate = searchParams.get('startDate');
    const endDate = searchParams.get('endDate');

    // Build where clause for date filtering
    const whereClause: any = {};

    if (startDate || endDate) {
      whereClause.timestamp = {};

      if (startDate) {
        whereClause.timestamp.gte = new Date(startDate);
      }

      if (endDate) {
        whereClause.timestamp.lte = new Date(endDate);
      }
    }

    // Query messages with related data
    const messages = await prisma.message.findMany({
      where: whereClause,
      include: {
        conversation: true,
        actions: true,
      },
      orderBy: {
        timestamp: 'desc',
      },
    });

    return NextResponse.json({
      success: true,
      dateRange: {
        startDate: startDate || null,
        endDate: endDate || null
      },
      totalMessages: messages.length,
      messages
    });

  } catch (error) {
    console.error("Error retrieving messages:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Failed to retrieve messages"
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();

    const {
      conversationId,
      senderType,
      content,
      status,
      reason,
      operatorId,
      timestamp
    } = body;

    // Validate required fields
    if (!conversationId || !senderType || !content || !status) {
      return NextResponse.json(
        {
          error: "Missing required fields: conversationId, senderType, content, status"
        },
        { status: 400 }
      );
    }

    // Validate senderType enum
    if (!Object.values(SenderType).includes(senderType)) {
      return NextResponse.json(
        {
          error: `Invalid senderType. Must be one of: ${Object.values(SenderType).join(", ")}`
        },
        { status: 400 }
      );
    }

    // Validate status enum
    if (!Object.values(Status).includes(status)) {
      return NextResponse.json(
        {
          error: `Invalid status. Must be one of: ${Object.values(Status).join(", ")}`
        },
        { status: 400 }
      );
    }

    // Check if conversation exists
    const conversation = await prisma.conversation.findUnique({
      where: { id: conversationId }
    });

    if (!conversation) {
      return NextResponse.json(
        { error: "Conversation not found" },
        { status: 404 }
      );
    }

    // Create the new message and update conversation in a transaction
    const result = await prisma.$transaction(async (tx) => {
      // Create the new message
      const newMessage = await tx.message.create({
        data: {
          conversationId,
          timestamp: timestamp ? new Date(timestamp) : new Date(), // Use provided timestamp or current time
          senderType,
          content,
          status,
          reason: reason || null,
          operatorId: operatorId || null,
          // createdAt is auto-generated by Prisma
        },
        include: {
          actions: true,
        },
      });

      // Update the conversation's current status and reason
      const updatedConversation = await tx.conversation.update({
        where: { id: conversationId },
        data: {
          currentStatus: status,
          currentReason: reason || null,
        },
      });

      return { newMessage, updatedConversation };
    });

    return NextResponse.json({
      success: true,
      message: "Message created and conversation updated successfully",
      data: {
        message: result.newMessage,
        conversation: result.updatedConversation,
      },
    });

  } catch (error) {
    console.error("Error creating message:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Failed to create message"
      },
      { status: 500 }
    );
  } finally {
    await prisma.$disconnect();
  }
}